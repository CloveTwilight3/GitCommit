name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Configure Git Bot
      shell: pwsh
      run: |
        git config --global user.name 'CloveTwilight3 [BOT]'
        git config --global user.email '193822784+CloveTwilightBOT@users.noreply.github.com'
        
    - name: Update version in files
      shell: pwsh
      run: |
        # Update version in PowerShell script
        $content = Get-Content 'src/GitCommit.ps1' -Raw
        $content = $content -replace 'GitCommit v[\d.]+', "GitCommit v${{ inputs.version }}"
        $content | Out-File 'src/GitCommit.ps1' -Encoding UTF8 -NoNewline
        
        # Update version in installer
        $installerContent = Get-Content 'installers/powershell/Install-GitCommit.ps1' -Raw
        $installerContent = $installerContent -replace 'GitCommit Installer v[\d.]+', "GitCommit Installer v${{ inputs.version }}"
        $installerContent | Out-File 'installers/powershell/Install-GitCommit.ps1' -Encoding UTF8 -NoNewline
        
        # Update version in uninstaller
        $uninstallerContent = Get-Content 'installers/powershell/Uninstall-GitCommit.ps1' -Raw
        $uninstallerContent = $uninstallerContent -replace 'GitCommit Uninstaller v[\d.]+', "GitCommit Uninstaller v${{ inputs.version }}"
        $uninstallerContent | Out-File 'installers/powershell/Uninstall-GitCommit.ps1' -Encoding UTF8 -NoNewline
        
        # Update version in Chocolatey nuspec
        [xml]$nuspec = Get-Content 'chocolatey/gitcommit.nuspec'
        $nuspec.package.metadata.version = "${{ inputs.version }}"
        $nuspec.Save((Resolve-Path 'chocolatey/gitcommit.nuspec').Path)
        
        # Update version in NSIS script
        $nsisContent = Get-Content 'installers/nsis/GitCommit-Installer.nsi' -Raw
        $nsisContent = $nsisContent -replace '!define PRODUCT_VERSION "[\d.]+"', "!define PRODUCT_VERSION `"${{ inputs.version }}`""
        $nsisContent | Out-File 'installers/nsis/GitCommit-Installer.nsi' -Encoding UTF8 -NoNewline
        
    - name: Install Chocolatey
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
    - name: Install NSIS
      shell: pwsh
      run: choco install nsis -y
      
    - name: Build Chocolatey Package
      shell: pwsh
      run: |
        # Ensure tools directory exists
        if (-not (Test-Path "chocolatey/tools")) {
          New-Item -ItemType Directory -Path "chocolatey/tools" -Force
        }
        
        # Copy source files to chocolatey tools
        Copy-Item "src/GitCommit.ps1" -Destination "chocolatey/tools/" -Force
        Copy-Item "src/GitCommit.bat" -Destination "chocolatey/tools/" -Force
        
        # Build package
        cd chocolatey
        choco pack
        Write-Host "‚úÖ Chocolatey package built successfully"
    
    - name: Publish to Chocolatey
      shell: pwsh
      run: |
        # Set API key
        choco apikey --key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
        
        # Push package to Chocolatey community repository
        $packageFile = Get-ChildItem "chocolatey/*.nupkg" | Select-Object -First 1
        if ($packageFile) {
          Write-Host "Publishing $($packageFile.Name) to Chocolatey..."
          choco push $packageFile.FullName --source https://push.chocolatey.org/
          Write-Host "‚úÖ Package published to Chocolatey!"
        } else {
          Write-Host "‚ùå No .nupkg file found!"
          exit 1
        }
        
    - name: Build NSIS Installer
      shell: pwsh
      run: |
        $nsisPath = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"
        if (-not (Test-Path $nsisPath)) {
            $nsisPath = "$env:ProgramFiles\NSIS\makensis.exe"
        }
        
        # Create license file if it doesn't exist
        if (-not (Test-Path "LICENSE")) {
          $licenseText = @'
        MIT License
        
        Copyright (c) 2025 Clove Twilight
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        '@
          $licenseText | Out-File "LICENSE" -Encoding UTF8
        }
        
        # Copy license for NSIS
        Copy-Item "LICENSE" -Destination "installers/nsis/" -Force
        
        # Create a simple icon for NSIS if it doesn't exist
        if (-not (Test-Path "installers/nsis/icon.ico")) {
          $iconData = @(
            0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x68, 0x05,
            0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          ) + (0..255) * 4 + (0..255)
          [System.IO.File]::WriteAllBytes("installers/nsis/icon.ico", $iconData)
        }
        
        # Build installer
        & $nsisPath "installers/nsis/GitCommit-Installer.nsi"
        
    - name: Create ZIP Archive
      shell: pwsh
      run: |
        # Create portable version
        New-Item -ItemType Directory -Path "GitCommit-Portable" -Force
        Copy-Item "src/GitCommit.ps1" -Destination "GitCommit-Portable/"
        Copy-Item "src/GitCommit.bat" -Destination "GitCommit-Portable/"
        Copy-Item "README.md" -Destination "GitCommit-Portable/"
        if (Test-Path "LICENSE") {
          Copy-Item "LICENSE" -Destination "GitCommit-Portable/"
        }
        
        # Create ZIP
        Compress-Archive -Path "GitCommit-Portable/*" -DestinationPath "GitCommit-${{ inputs.version }}-Portable.zip"
        
    - name: Commit version changes
      shell: pwsh
      run: |
        git add .
        git commit -m "Release v${{ inputs.version }}" || echo "No changes to commit"
        git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
        git push origin main
        git push origin "v${{ inputs.version }}"
        
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ inputs.version }}"
        name: "GitCommit v${{ inputs.version }}"
        body: |
          ## GitCommit v${{ inputs.version }}
          
          ### Installation Options:
          
          **üç´ Chocolatey (Recommended):**
          ```bash
          choco install gitcommit
          ```
          *Note: It may take a few minutes for the package to become available after release.*
          
          **üíæ Windows Installer:**
          Download and run `GitCommit-${{ inputs.version }}-Setup.exe`
          
          **üì¶ Portable Version:**
          Download and extract `GitCommit-${{ inputs.version }}-Portable.zip`
          
          ### Usage:
          1. Open terminal in any Git repository
          2. Run: `GitCommit`
          3. Enter your commit message when prompted
          
          ### What's Changed:
          - Automated Git workflow (checkout main, pull, add, commit, push)
          - Interactive commit message prompts  
          - Error handling and validation
          - Cross-platform PowerShell support
          
        artifacts: |
          chocolatey/*.nupkg
          installers/nsis/GitCommit-${{ inputs.version }}-Setup.exe
          GitCommit-${{ inputs.version }}-Portable.zip
        prerelease: ${{ inputs.prerelease }}
        token: ${{ secrets.GITHUB_TOKEN }}